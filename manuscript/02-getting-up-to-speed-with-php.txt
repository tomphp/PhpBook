# Getting up to Speed with PHP

As I said previously this book assumes you are already familiar with PHP. In
this chapter I will just quickly cover a few newer additions to PHP as well as
some tools and techniques process which you will need to know about to continue
with this book.

I don't intend to go into anything in too much depth, it will contain just
enough information of the things we will be using and I encourage you to
research them further yourself.

## Namespaces

If namespaces are new to you then I think the easiest analogy I can think of is
that they are like folders for your code. Using namespaces means you can have 2
or more classes with the same name in different namespaces, just like you can
have 2 or more files with the same name in different folders.

Without covering all the details of PHP namespaces here I will quickly cover
the aspects of them which we will be using.

The full documentation for PHP namespaces can be found in the
[manual](http://php.net/manual/en/language.namespaces.php).

Firstly, in order to define a class inside a specific namespace you use the
`namespace` statement on the first line of the file containing the class like
so:

{title="Class defined inside namespace", lang=php}
~~~~~~~~
<?php

namespace MyApp\Entity;

class Contact
{
    // ...
}
~~~~~~~~

This defines the class `Contact` inside the `Entity` namespace which is inside
the `MyApp` namespace. Namespaces are separated by backslashes.

To use a class in a piece of code in the same namespace you can simply refer
to it by name:

{title="Using a class defined in the current namespace", lang=php}
~~~~~~~~
<?php

namespace MyApp\Entity;

$contact = new Contact();
~~~~~~~~

To use the class in a piece of code in a different namespace you can refer to
it by its fully qualified class name (FQCN) like so:

{title="Referencing a class by its FQCN", lang=php}
~~~~~~~~
<?php

namespace MyApp;

$contact = new \MyApp\Entity\Contact();
~~~~~~~~

You can also refer to a class in a sub-namespace relative to the current
namespace like so:

{title="Referencing a class by its relative namespace", lang=php}
~~~~~~~~
<?php

namespace MyApp;

$contact = new Entity\Contact();
~~~~~~~~

And finally you can pull a class from a different namespace into scope with the
`use` statement. Add this at the top of the file just after the `namespace`
statement. This is the way I prefer in most situations. Here's an example:

{title="The use statement", lang=php}
~~~~~~~~
<?php

namespace MyApp;

use MyApp\Entity\Contact;

$contact = new Contact();
~~~~~~~~

One final thing, if you want to use a class from another namespace in a
namespace which already has a class with the same name in it, then you can
rename the one you're importing with the `as` keyword like so:

{title="Aliasing an imported class", lang=php}
~~~~~~~~
<?php

namespace MyApp\Form\Contact;

use MyApp\Entity\Contact as ContactEntity;

class Contact
{
    public function __construct(ContactEntity $entity)
    {
        // ...
    }

    // ...
}
~~~~~~~~

It's all pretty simple really right? That's everything you'll need to know about
namespaces to continue with this book.

## Typehints

PHP started off as a dynamically typed language. It has a few basic, scalar
types:

{title="Scalar types in PHP", lang=php}
~~~~~~~~
<?php

42; // integer

12.5; // float or double

'abc123'; // string

false; // boolean
~~~~~~~~

It also has *arrays*, *callables* and any user define classes or interfaces which
are all also types.

Being a dynamically typed language means that a variable or function argument
can contain any type at any time (this also goes for function return types):

{title="Dynamic typing example", lang=php}
~~~~~~~~
<?php

function fn($p)
{
    return $p;
}

class C1
{
}

class C2
{
}

$x = 42; // $x contains an integer

$x = 12.5; // now $x contains a float

$y = fn(123); // $p in fn() contains an integer and $y contains an integer

$y = fn(fals); // $p in fn() contains a boolean and $y contains a boolean

$c = new C1(); // $c contains a C1 instance

$c = new C2(); // $c contains a C2 instance
~~~~~~~~

In contrast, in a statically typed language a variable, function argument or
return value can only ever be the type it is defined to contain. If another
type is assigned it will either be an error or it will get converted. Here's
a C++ version of the last example:

{title="Static typing example", lang=c++}
~~~~~~~~
int fn(int p) {
    return p;
}

class C1 {
};

class C2 {
};

int main() {
    int x = 42; // x contains an integer

    x = 12.5; // x contains 12, it keeps only the integer part

    y = fn(123); // p in fn() contains an integer and y contains an integer

    y = fn(false); // p in fn() contains 0 and y contains 0

    C1 *c = new C1(); // c contains a C1 instance

    c = new C2(); // this is an error as c can only contains instances of C1
}
~~~~~~~~

Statically typed languages actually have great benefits, because you always
know what type everything is there's never a chance of you doing something to a
variable which you are not allowed to do to the type it contains. On the other
hand, dynamically typed languages let you get on and do things quickly without
having to worry about how to work with type constraints.

Since static typing does have benefits PHP introduced typehints on function
arguments. Typehints allow you to specify exactly what user defined type a
function accepts for each parameter, it will throw an exception if the wrong
type is given:

{title="PHP typehint example", lang=php}
~~~~~~~~
<?php

class C1
{
}

class C2
{
}

function fn(C1 $c)
{
}

fn(new C1()); // works perfectly

fn(new C2()); // error

fn(5); // error
~~~~~~~~

Frustratingly PHP does not allow typehints for scalar types or function return
values.

However even though PHP is a dynamically typed language you should still strive
to keep your typing sensible, this means if you create a variable that contains
a specific type try not to reuse it by assigning a new value of a different
type. Also don't call methods on objects which are not in the typehinted
interface, if you do it will not be an error but it's not good practice:

{title="Mis-using an interface in PHP", lang=php}
~~~~~~~~
<?php

interface Fooer
{
    public function doFoo();
}

class FooBar implements Fooer
{
    public function doFoo()
    {
    }

    public function doBar()
    {
    }
}

function performAction(Fooer $f)
{
    // This is fine, doFoo() is defined in the Fooer interface
    $f->doFoo();

    // Don't do this, $f is a Fooer and doBar() is not defined
    // in the Fooer interface
    $f->doBar();
}

performAction(new FooBar());
~~~~~~~~

Throughout this book I will be writing as if I'm writing in a statically typed
language 90% of the time and typehint whenever possible. However, PHP is a
dynamic language and some times it's helpful to take advantage of this,
whenever I do this I will point it out and explain my reason for choosing to
do it.

## Front Controllers

The front controller is a design pattern for web applications which involves
creating a single entry point into your application. It requires configuring
your webserver to redirect all requests to a single PHP script which then
processes the request and decides what content to display.

Let's take a look at a little example:

### The Traditional Approach

First lets look at the traditional approach of using PHP. Let's create 2 files
inside an empty folder, the first one we'll call `page1.php`:

>>[page1.php](../examples/chapter-02/front-controller/01-traditional-approach/page1.php)

And the second one we'll call `page2.php`

>>[page2.php](../examples/chapter-02/front-controller/01-traditional-approach/page2.php)

Next open a terminal and `cd` into the directory containing these files and use
the following command to start up PHP's built in webserver:

`$ php -S localhost:8080`

Now if you open your browser and go to `http://localhost:8080/page1.php` then
you will see `You are viewing page 1`. If you then go to
`http://localhost:8080/page2.php` you will see `You are viewing page 2`.

When you are done, press `CTRL+C` in your terminal to stop the webserver.

This is the approach that you normally first learn when starting out with
PHP.  There's nothing wrong with this approach, but in general using a front
controller is better so let's take a look at that.

### Single Entry Point

Create a new folder and this time create a single file called `index.php`
containing:

>>[index.php](../examples/chapter-02/front-controller/02-single-entry-point/index.php)

Then in the terminal again `cd` to this new directory. This time start the PHP
built in webserver with the name of the file we want to use as the application
entry point like so:

`$ php -S localhost:8080 index.php`

Again open your browser and visit `http://localhost:8080/page1` and you will
see `You are looking at: /page1`, and again go to`http://localhost:8080/page2`
and you will see `You are looking at: /page2`.

So as you can see, anything you type after the `http://localhost:8080` is
redirected to the `index.php` file and you can use the `$_SERVER` superglobal
to get the actual URI requested.

### The Simplest Front Controller in the World

So let's modify the `index.php` file to look like this:

>>[index.php](../examples/chapter-02/front-controller/02-simple-front-controller/index.php)

Now if we go to our browser and go to `http://localhost:8080/page1` or
`http://localhost:8080/page2` then they work as expected. Also, going to
`http://localhost:8080/anything-else` now shows a 404 message.

Obviously this is a pretty pointless and limiting front controller but
hopefully you now understand the theory behind it.

Stop the webserver again by pressing `CTRL+C` in the terminal.

### Front Controllers using Apache

In order to use a front controller with Apache you need to tell Apache where to
find the PHP script to use for the application entry point. As of Apache
version `2.2.16` you can do this by simply adding:

`FallbackResource /index.php`

to your `.htaccess` file in your document root.

## Standards

As a language get more powerful it often allows many different ways and
approaches to achieve the same thing. Each person then has their own
preferences of how they personally like to do things.

On one hand this is great; it allows programmers to be to write their code in
the way which best fits how they think, lay it out in they way which look the
most aesthetically pleasing to them, and structure it in the way which they
find easiest to navigate.

On the other hand this becomes a total nightmare when you are working with
several libraries, all written by different programmers who each have their own
way of doing all things. You have to learn each of the different approaches to
efficiently navigate and understand each author's code. Also, it may make it
tricky for some of the libraries to happily interact with each other.

So for the reasons just mentioned, programmers get together is groups and
create standards which are a nice middle ground which everyone is mostly happy
with.  You'll often find that you might not agree with everything defined in a
standard but by putting that to one side and accepting it you reap the benefits
of having your code being much more consistent with all the other users of the
standard's code; as well as any tools which have been built to work with that
standard.

### PHP-FIG

Introducing PHP-FIG! PHP-FIG or the PHP Framework Interoperability Group is a group
built up of various key people in the PHP community who have got together and
started to build some standards for using PHP. Many PHP software project have
now adopted or are adopting many of these standards and I full recommend you do
the same.

At the time of writing this there are 5 published standards:

| Standard | Description                                  |
|----------|----------------------------------------------|
| PSR-0    | Autoloading Standard                         |
| PSR-1    | Basic Coding Standard                        |
| PSR-2    | Coding Style Guide (implies PSR-1)           |
| PSR-3    | Logger Interface                             |
| PSR-4    | Improved Autoloading (an extension to PSR-0) |

And a couple more in discussion:

| Standard | Description       |
|----------|-------------------|
| PSR-5    | PHPDoc            |
| PSR-6    | Caching Interface |

In this book I will be using PSR-0 for all code (except in small examples)
and PSR-2 for coding style. I will explain a bit more about these in the next 
few sections.

For more Information on PHP-FIG visit the [website](http://www.php-fig.org/).

### PHP The Right Way

[PHP The Right Way](http://www.phptherightway.com/) is not a standard as such,
it's simply a website which lists lots of things about how PHP should be used
if you are serious about writing good code. It contains lots of fantastic
advice and I highly recommend studying it.

## Docblocks

Docblocks are comments which contain annotations which can be added to your code
to make it possible to generate documentation about your codebase
automatically. One such too is [phpDocumentor](http://www.phpdoc.org/).

This can be fantastically useful if you are building a library for others to
use as you can generate great API documentation using it.

There is however another use for it; we've already talked about typehints
which, by enforcing the types of function arguments, provided an extra level of
documentation to people reading the code and help them understand it quicker.
It also helps IDEs provide auto completion functionality while you're writing
the code. This is great but so far PHP has only gone half way, as I said
earlier there are no typehints for function return values or for scalar types,
also the type of a variable cannot be defined.  Therefore, I've made it a habit
to document these by using PHPdoc tags. I hope one day PHP will add more
complete typehinting.

The format of docblocks are fairly standard now but there's work to fully
standardise it with PSR-5.

Here's a little example of how I'll be using docblocks in the code in this book:

{title="Using docblocks to annotate types", lang="php"}
~~~~~~~~
<?php

class Example
{
    /** @var string */
    private $name;

    /** @var Email */
    private $email;
    
    /** @param string $name */
    public function addCustomer($name, Email $email)
    {
        // ...
    }

    /** @return Customer[] */
    public function getCustomers()
    {
        // ...
    }
}
~~~~~~~~

Docblocks allow you to add much more detail than I've given here. You can give
descriptions and details for the file, the class, any variables or parameters,
etc. But since I don't want to generate an API document for this codebase I'm
only using it to specify the types which cannot be specified directly in PHP.

## The Autoloader

You may never have written a PHP autoloader callback, or maybe never have heard
of one, but you may well have used it if you have build any PHP applications
using a framework. If however you are not aware of the autoloader and are
referencing code in different files by using PHP's `require`, `require_once`,
`include` and `include_once` statements then you need to STOP and read this
section now!

The autoloader is a system in PHP where you can create a callback function that
will be called if your try to use a class which has not yet been defined. This
callback receives the name of the class trying to be used a parameter and the
function can then use this to lookup and require the file needed to provide the
class definition.

In order to use an autoloader callback you can either define a function called
`__autoload` which will provide the autoloading logic, or you can use the more
recent and flexible `spl_autoload_register` function to register you
autoloading function.

Now you know what an autoloader is there's some good news, there's no actual
need to write the autoloader function yourself, there's a wonderful tool called
Composer which can take care of that for you.

However, if you do want to look into autoloading in more detail you can read
about it in the [manual](http://php.net/manual/en/language.oop5.autoload.php).

## PSR-0 - Autoloading Standard

Before talking about Composer I'd like to first introduce PSR-0. PSR-0 is a
standard which was designed to make it easy to find the files where given
classes are defined.

The basic rules are as follows:

* There is exactly one class defined per file
* The file name is the same name (and case) as the name of the class defined
inside it with `.php` appended to it
* The file exists in directory structure which fully matches the namespace
which the class is defined in

The full PSR-0 specification can be read on the [PHP-FIG
website](http://www.php-fig.org/psr/psr-0/).

### Example

A file located at
`/home/tom/projects/AutoloadExample/src/MyApp/Entity/Contact.php` would contain
the following code:

{title="PSR-0 compliant class", lang=php}
~~~~~~~~
<?php

namespace MyApp\Entity;

class Contact
{
    // ...
}
~~~~~~~~

Whatever comes before the root namespace in the file name (in this case
`/home/tom/projects/AutoloadExample/src`) is not important, so long as the 
FQCN is mirrored in the folder structure up to the class name.

I>## Example File Locations
I>
I> From this point on in the book I will not mention file names when displaying
I> code examples unless the file name does not match the PSR-0 standard.

## Composer

Composer is a dependency manager for PHP, it allows you to specify all the
libraries and tools that your PHP project depends on in a simple JSON file, it
will then fetch the correct versions of those dependencies into your project.

This means it's easy to distribute your project without including its 3rd party
dependencies, while making it very easy for users or developers working on
the project to easily install them themselves. It also makes it easy to quickly
update to newer versions of dependencies.

Composer installs its dependencies locally to the project in a directory called
`vendor` rather than installing them globally onto the system on. This is a
definite plus as it means you can run many projects on the same system, all
working with different versions their dependencies, without getting in to a
mess.

Now this is all very interesting but you might think you have no intention of
using any external libraries or tools with your new project, so is Composer
still useful?

The answer is most definitely yes:

* Firstly, there are lots of great development tools which can be installed via
Composer which you should definitely be using even if you don't intend on using
3rd party libraries
* Secondly, you may not intend on using 3rd party libraries but if you start
off using Composer from the beginning you can always change your mind and add a
dependency very easily
* And thirdly, Composer provides a nice and easy to set up autoloader for PHP.
By simply adding a few lines of JSON to your project your autoloader is up and
ready to go

While there are plenty of people out there who will have a good reason not to
use Composer, in my opinion if you don't have on then you should definitely be
using it in your projects.

So that's a little intro on what Composer can do for you. The full
documentation can be found at https://getcomposer.org/ but to save you the
hassle of reading it all now let's have a look at a little example of the
basics.

### Composer Example

#### Installing

The various installation options for Composer can be found on the
[website](https://getcomposer.org/).

You can either install a copy locally to your project which means your call it
by running:

`$ ./composer.phar`

Or you can install it globally on your system and rename it to `composer`. I
have done it this way so on my system I run Composer by simply typing:

`$ composer`

If you have installed it differently to me you will need to adjust my
instructions accordingly.

#### Setting up the Autoloader

To start of create a new project folder and `cd` into it:

```
$ mkdir ComposerExample
$ cd ComposerExample
```

If you want to you Composer locally you'll want to install it inside this
folder now, if you have installed it global already then you can just carry on.

Next up create a file in the project folder called `composer.json` and add the
following content:

>>[composer.json](../examples/chapter-02/composer/01-autoloader/composer.json)

What we have told Composer to do here is set up an autoloader to local any
classes in the `ComposerExample` namespace using the PSR-0 file structure inside
a directory inside our project directory called `src`.

Now tell Composer to apply these settings with the following command (remember
you will need to adjust it if you have installed Composer locally):

`$ composer install`

Once it has finished you will notice it has created a folder called `vendor`
and another file called `composer.lock`. If you're are using a Source Control
System like git (and you really should be!) then you should instruct it to
ignore your `vendor` directory from the repository, the `composer.lock` file
should be added to the repository though.

Next up create a directory structure for our PSR-0 classes to go:

`$ mkdir -p src/ComposerExample`

Then create a file called `src/ComposerExample/HelloApplication.php` with the
following content:

>>[src/ComposerExample/HelloApplication.php](../examples/chapter-02/composer/01-autoloader/src/ComposerExample/HelloApplication.php)

And finally create a class called `run.php` containing:

>>[run.php](../examples/chapter-02/composer/01-autoloader/run.php)

Now to see it work run:

`$ php run.php`

Ta da!

#### Adding a Dependency

Now lets dress it up a bit using a 3rd party library. I had a little hunt
around for something interesting to try, I found Maxime Bouroumeau-Fuseau's
ConsoleKit library.

First up lets add it to the project as a dependency by updating our
`composer.json` file to contain the following:

{title="composer.json", lang=php}
~~~~~~~~
{
    "require": {
        "maximebf/consolekit": ">=1.0.0"
    },
    "autoload": {
        "psr-0": {
            "ComposerExample\\": "./src"
        }
    }
}
~~~~~~~~

Next we tell Composer to download it new dependency by running:

`$ composer update`

It should download the ConsoleKit package which will now be ready to use. Let's
update our `ComposerExample\HelloApplication` class to look like this:

>>[src/ComposerExample/HelloApplication.php](../examples/chapter-02/composer/02-dependency/src/ComposerExample/HelloApplication.php)

And let's add a new class called `ComposerExample\HelloCommand` like so:

>>[src/ComposerExample/HelloCommand.php](../examples/chapter-02/composer/02-dependency/src/ComposerExample/HelloCommand.php)

Now to try to run it:

`$ php run.php hello`

And there we have it, we have simply added a dependency to our app and used it
leaving Composer to do all the hard work of downloading it and setting up the
autoloader to find it.

#### Adding Development Tools

Composer's `require` section lets you define the requirements your project
needs to run but it also has a `require-dev` section which for dependencies
which you want to use for development (testing tools for example).

CodeSniffer is a tool which checks that your code follows a given coding style,
lets add it to our project.

Update the `composer.json` file to include the CodeSniffer dev dependency:

>>[composer.json](../examples/chapter-02/composer/02-dependency/composer.json)

Once again tell Composer to update its dependencies by running:

`$ composer update`

After it has finished CodeSniffer is ready to be used. When Composer installs
tool it will install the executable files in a local directory, by default this
directory is `vendor/bin`. We can run CodeSniffer by running:

`$ vendor/bin/phpcs --standard=psr2 src`

If all the code in our `src` directory conforms to the PSR-2 coding style then
CodeSniffer should have complete without and errors.

To make life easier your can add `vendor/bin` to your operating systems `PATH`
variable so you can execute your tools more easily. On Linux you do this by
adding:

`PATH=./vendor/bin:$PATH`

To your `.bashrc` file in your home directory.

## Keeping Logic and Display Code Separate

PHP lets you easily mix text output (usually HTML) with your logic. This makes
PHP a really useful and powerful web templating language but it also makes it
very easy to write hideous code which mixes all your application logic in with
you HTML output like so:

{title="Mixing logic and display code", lang=php}
~~~~~~~~
<?php

$repository = new CustomerRepository();

?>

<h1>List Customers</h1>

<?php

function escape($string)
{
    return htmlentities($string);
}

if ($_POST['search']) {
    try {
        $customers = $repository->getMatching($_POST['search']);
    } catch (LoadingException $e) {
        die('The was an error');
    }
}

if (count($customers)) { ?>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Email Address</th>
                <th>Phone Number</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($customers as $customer) { 
                echo '<tr>';
                echo '<td>' . escape($customer->name) . '</td>';
                $customer->printEmail();
                ?>
                    <td><?php echo escape($customer->phone); ?></td>
                </tr>
            <?php } ?>
        </tbody>
    </table>
<?php } else {  ?>
    <p>No customers found.</p>
<?php } ?>
~~~~~~~~

I think we can all agree that is pretty ugly but if left to get out of control
it can get a lot uglier!

The solution to this is to not mix your HTML & PHP code together and maintain a
clear separation between the to. This also allows designers to work on the user
interface without have to understand the codebase.

There are templating libraries for PHP such as Twig and Smarty which introduce
their own template tags for using in your HTML templates. Or you can use of PHP
itself to do the templating but maintain the discipline of keeping logic and
view code separate. It may even be worth using different file extensions to
keep it clear; `.php` for logic and `.phtml` for HTML templates.

The choice between using PHP or a dedicated templating library can often be
down to who is going to have access to modify the view templates. If you
designers are in house, trust worthy and trained then using PHP can be the
easiest approach. However, if you are out sourcing the design work to people you
trust less, then using a templating engine means they cannot compromise the
security of the application by adding bad PHP code into the templates.

## Coding Style

Coding Style is simply the way you layout and format your code. In the previous
Standards section I talked about how they were introduced to maintain a
consistent approach to using a programming language between many developers,
using a coding style is one element of this.

Coding style standards define things like:
* How many spaces should be used to indent code
* Should the opening brace for a function body goes on the same line as the
function definition or on the line after 
* Should variables be named using camelCase or snake_case
* etc.

As with all standards you'll unlikely find one which you agree with every bit
of, but rather that creating your own perfect one which no one else uses, you
should use a well used one you like mostly.

At the moment the best one to use for PHP in my opinion is the one defined by
PSR-2 as many people have adopted it. All application code I present in this
book will follow the PSR-2 standard with a couple of exceptions:

### 1. Unit Tests

When writing unit tests I follow PSR-2 completely apart from 2 elements; the
method names for the tests. Firstly, instead of using camelCase for these
method names I use snake_case because the method names are sentences and with
snake_case is easier to separate the words when reading it. And secondly I'll
omit the `public` access specifier as it's the default in PHP and keeps the
line shorter with long method names:

{title="Unit test coding style example", lang=php}
~~~~~~~~
<?php

namespace spec;

use PhpSpec\ObjectBehavior;

class ExampleSpec extends ObjectBehavior
{
    function it_adds_2_numbers_together()
    {
        $this->add(5, 2)->shouldReturn(7);
    }
}
~~~~~~~~

### 2. Template Code

When writing template code using PHP I prefer to keep it looking as close to
HTML as possible. I try to keep the code inside PHP tags to single expressions
and I use the `foreach :`/`endforeach`, `if :`/`endif` style of code blocks as
I think they are easier to match up. Here's an example:

{title="Neat display template code example", lang=php}
~~~~~~~~
<h1>List Customers</h1>

<?php if (count($customers)) : ?>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Email Address</th>
                <th>Phone Number</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($customers as $customer) : ?>
                <tr>
                    <td><?php echo escape($customer->name); ?></td>
                    <td><?php echo escape($customer->email); ?></td>
                    <td><?php echo escape($customer->phone); ?></td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
<?php else : ?>
    <p>No customers found.</p>
<?php endif; ?>
~~~~~~~~
