# Preface

I have been working professionally with PHP since 2000. In that time I have
seen it grow from a basic scripting language which allowed you to hack your
ideas together in version 3, to something that resembled a fully featured
language in version 4, through to actually becoming that fully featured
language in version 5.

One of the fantastic features of PHP is that it's so easy to get up and running
quickly; you can easily add some dynamic elements to your existing HTML page
with very little knowledge or experience. However, this is also a problem.
Since anyone can start piecing together snippets of PHP code to get something
to work, there are many people out there who are writing bad PHP code as they
have never learnt how to program properly. Badly written code is often broken,
very hard to add new functionality to, hard to maintain and rarely scalable.

In this book I hope to incorporate many programming methodologies, techniques
and tools and apply them in the context of PHP to create a well designed
application. These include [Object Oriented Programming](#oop), [Design
Patterns](#design-patterns), elements from [Domain Driven Design](#ddd),
[Refactoring](#refactoring), [The SOLID Principals](#the-solid-principles),
[Test Driven Development](#tdd) and [Behaviour Driven Development](#bdd). If
these are all new to you, then this will be quite a ride.

I do not intend to cover any of these topics extensively. There are already
many great books and resources covering all of them already and written by far
cleverer people than myself. Therefore, I encourage you to read and learn more
about all these subjects further. This book should, however, provide a great
introduction to many of these methodologies, techniques and tools and show you
how to get started quickly using them with PHP.

This book aims to introduce you to what you need to start building a well
designed, manageable, and extensible medium size PHP application. The approach
and process of working throughout this book should also fit very well into an
*Agile* process of working. However, it will only deal with the actual
development and architecture of the project rather than the full planning,
communication and team management aspects included in the Agile way of working.

The architecture of the application we will be building in this book is a
fairly common approach. It will not be based on any frameworks, but we will
make use of some later on to see how frameworks can be very useful tools. In my
mind this is how modern frameworks should be used. This architecture and
approach to PHP application design is one we often use at the company I work
for and is a tried and tested approach.

So finally, who is this book for? Firstly this is not an introduction to PHP. I
assume you are already familiar with the language; you should be able to use
*classes* and at least understand what an *interface* is. You have probably
built at least one medium scale application but may not really know a lot
about software design principles. If you have less experience than this you may
struggle to keep up. If you have more then there may be less to be learnt from
this book but hopefully it will still be helpful.

## Getting in Contact

I'd love to hear from you! Whether it's about something in the book which you
didn't understand, think I could improve or didn't agree with, or if you'd like
to share how you do things differently, or even just to talk about software
design in general then please get in touch.

You can find me on:

Twitter: @tomphp
Email: tom@x2k.co.uk
Skype: x2kmusic
